import binascii

# Message datagramme en hexadécimal
datagram_hex ="ffffffffffff001b1b80d1000800450000326c7c000080110333c0a80a64ffffffff0432d6d8001eb4e5434d443b3536373b33353934323530343b5354415254"

# Conversion du message hexadécimal en binaire
datagram_bin = binascii.unhexlify(datagram_hex)

# En-tête Ethernet (14 octets)
ethernet_header = datagram_bin[:14]

# En-tête IP (20 octets)
ip_header = datagram_bin[14:34]

# En-tête UDP (8 octets)
udp_header = datagram_bin[34:42]

# Données (32 octets)
data = datagram_bin[42:]

# Affichage des résultats
print("En-tête Ethernet:", binascii.hexlify(ethernet_header).decode("utf-8"))
print("En-tête IP:", binascii.hexlify(ip_header).decode("utf-8"))
print("En-tête UDP:", binascii.hexlify(udp_header).decode("utf-8"))
print("Données:", binascii.hexlify(data).decode("utf-8"))


# Message datagramme en binaire (exemple)
#datagram_binaire = b'\xff\xff\xff\xff\xff\xff\x00\x1b\x1b\x80\xd1\x00\x08\x00\x45\x00\x00\x32\x6c\x7c\x00\x00\x80\x11\x03\x33\xc0\xa8\x0a\x64\xff\xff\xff\xff\x04\x32\xd6\xd8\x00\x1e\xb4\xe5\x43\x4d\x44\x3b\x35\x36\x37\x3b\x33\x35\x39\x34\x32\x35\x30\x34\x3b\x53\x54\x41\x52\x54'

# START
datagram_binaire = b"\xff\xff\xff\xff\xff\xff\x00\x1b\x1b\x80\xd1\x00\x08\x00\x45\x00" \
b"\x00\x32\x6c\x7c\x00\x00\x80\x11\x03\x33\xc0\xa8\x0a\x64\xff\xff" \
b"\xff\xff\x04\x32\xd6\xd8\x00\x1e\xb4\xe5\x43\x4d\x44\x3b\x35\x36" \
b"\x37\x3b\x33\x35\x39\x34\x32\x35\x30\x34\x3b\x53\x54\x41\x52\x54"

# INIT
# datagram_binaire = b"\xff\xff\xff\xff\xff\xff\x00\x1b\x1b\x80\xd1\x00\x08\x00\x45\x00" \
# b"\x00\x3e\x55\x6b\x00\x00\x80\x11\x1a\x38\xc0\xa8\x0a\x64\xff\xff" \
# b"\xff\xff\x04\x32\xd6\xd8\x00\x2a\x4a\x7d\x43\x4d\x44\x3b\x35\x36" \
# b"\x34\x3b\x33\x35\x39\x30\x36\x34\x35\x38\x3b\x49\x4e\x49\x54\x3b" \
# b"\x32\x33\x30\x36\x31\x36\x30\x32\x73\x69\x31\x31"

# STOP
# datagram_binaire = b"\xff\xff\xff\xff\xff\xff\x00\x1b\x1b\x80\xd1\x00\x08\x00\x45\x00" \
# b"\x00\x31\x70\xce\x00\x00\x80\x11\xfe\xe1\xc0\xa8\x0a\x64\xff\xff" \
# b"\xff\xff\x04\x33\xd6\xd8\x00\x1d\xad\x2c\x43\x4d\x44\x3b\x36\x30" \
# b"\x39\x3b\x33\x37\x39\x39\x30\x38\x39\x30\x3b\x53\x54\x4f\x50"

# EVENT 18 km/h
# datagram_binaire = b"\xff\xff\xff\xff\xff\xff\x00\x1b\x1b\x80\xd1\x00\x08\x00\x45\x00" \
# b"\x00\x51\x6d\x26\x00\x00\x80\x11\x02\x6a\xc0\xa8\x0a\x64\xff\xff" \
# b"\xff\xff\x04\x32\xd6\xd8\x00\x3d\x74\xb8\x45\x56\x45\x4e\x54\x3b" \
# b"\x35\x36\x39\x3b\x33\x35\x39\x39\x32\x35\x30\x34\x3b\x32\x38\x3b" \
# b"\x33\x37\x3b\x3b\x3b\x3b\x30\x2e\x30\x35\x30\x31\x31\x39\x3b\x32" \
# b"\x33\x30\x36\x31\x36\x30\x38\x35\x35\x32\x31\x34\x35\x33\x3b"

# EVENT 59 km/h
# datagram_binaire = b"\xff\xff\xff\xff\xff\xff\x00\x1b\x1b\x80\xd1\x00\x08\x00\x45\x00" \
# b"\x00\x51\x6d\xbe\x00\x00\x80\x11\x01\xd2\xc0\xa8\x0a\x64\xff\xff" \
# b"\xff\xff\x04\x32\xd6\xd8\x00\x3d\x8a\xb5\x45\x56\x45\x4e\x54\x3b" \
# b"\x35\x37\x31\x3b\x33\x36\x30\x39\x32\x35\x30\x34\x3b\x32\x38\x3b" \
# b"\x33\x37\x3b\x3b\x3b\x3b\x30\x2e\x31\x35\x30\x31\x30\x35\x3b\x32" \
# b"\x33\x30\x36\x31\x36\x30\x38\x35\x35\x34\x30\x32\x31\x38\x3b"


# EVENT 100 km/h
# datagram_binaire = b"\xff\xff\xff\xff\xff\xff\x00\x1b\x1b\x80\xd1\x00\x08\x00\x45\x00" \
# b"\x00\x51\x6e\xef\x00\x00\x80\x11\x00\xa1\xc0\xa8\x0a\x64\xff\xff" \
# b"\xff\xff\x04\x32\xd6\xd8\x00\x3d\x6d\xb2\x45\x56\x45\x4e\x54\x3b" \
# b"\x35\x38\x33\x3b\x33\x36\x36\x39\x32\x35\x30\x34\x3b\x32\x38\x3b" \
# b"\x33\x37\x3b\x3b\x3b\x3b\x30\x2e\x37\x35\x30\x33\x37\x32\x3b\x32" \
# b"\x33\x30\x36\x31\x36\x30\x38\x35\x36\x31\x36\x38\x32\x38\x3b"


# EVENT 60 km/h
# datagram_binaire = b"\xff\xff\xff\xff\xff\xff\x00\x1b\x1b\x80\xd1\x00\x08\x00\x45\x00" \
# b"\x00\x51\x70\x16\x00\x00\x80\x11\xff\x79\xc0\xa8\x0a\x64\xff\xff" \
# b"\xff\xff\x04\x32\xd6\xd8\x00\x3d\x72\xbd\x45\x56\x45\x4e\x54\x3b" \
# b"\x36\x30\x31\x3b\x33\x37\x35\x39\x32\x35\x30\x34\x3b\x32\x38\x3b" \
# b"\x33\x37\x3b\x3b\x3b\x3b\x31\x2e\x36\x35\x31\x32\x37\x35\x3b\x32" \
# b"\x33\x30\x36\x31\x36\x30\x38\x35\x36\x35\x31\x35\x33\x31\x3b"






# En-tête Ethernet (14 octets)
ethernet_header = datagram_binaire[:14]

# En-tête IP (20 octets)
ip_header = datagram_binaire[14:34]

# En-tête UDP (8 octets)
udp_header = datagram_binaire[34:42]

# Données (32 octets)
data = datagram_binaire[42:]

# Conversion des bytes en chaîne de caractères (string) en utilisant l'encodage "utf-8"
data_string = data.decode("utf-8")

# Affichage des résultats
print("En-tête Ethernet:", ethernet_header)
print("En-tête IP:", ip_header)
print("En-tête UDP:", udp_header)
print("Données:", data_string)

if 'START' in  data_string.split(';'):

    print("ok")